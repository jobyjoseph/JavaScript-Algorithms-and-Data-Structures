1. https://leetcode.com/problems/move-zeroes/

/**
 * @param {number[]} nums
 * @return {void} Do not return anything, modify nums in-place instead.
 */
var moveZeroes = function(nums) {
    let nonZeroIndex = 0;

    for(let i = 0; i < nums.length; i++) {
        if(nums[i] !== 0) {
            [nums[i], nums[nonZeroIndex]] = [nums[nonZeroIndex], nums[i]];
            nonZeroIndex++;
        }
    }
    return nums;
};

=====

2. https://leetcode.com/problems/contains-duplicate/

/**
 * @param {number[]} nums
 * @return {boolean}
 */
var containsDuplicate = function(nums) {
    let dictionary = {};
    for(let i = 0; i < nums.length; i++) {
        if(dictionary[nums[i]]) {
            return true;
        } else {
            dictionary[nums[i]] = 1
        }
    }
    return false;
};

=====

3. https://leetcode.com/problems/contains-duplicate-ii/

/**
 * @param {number[]} nums
 * @param {number} k
 * @return {boolean}
 */
var containsNearbyDuplicate = function (nums, k) {
  let dictionary = {};
  for (let i = 0; i < nums.length; i++) {
    if (
      typeof dictionary[nums[i]] !== "undefined" &&
      Math.abs(i - dictionary[nums[i]]) <= k &&
      Math.abs(i - dictionary[nums[i]]) > 0
    ) {
      return true;
    } else {
      dictionary[nums[i]] = i;
    }
  }
  return false;
};
