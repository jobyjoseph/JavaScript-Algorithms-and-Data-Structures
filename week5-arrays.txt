1. https://leetcode.com/problems/move-zeroes/

/**
 * @param {number[]} nums
 * @return {void} Do not return anything, modify nums in-place instead.
 */
var moveZeroes = function(nums) {
    let nonZeroIndex = 0;

    for(let i = 0; i < nums.length; i++) {
        if(nums[i] !== 0) {
            [nums[i], nums[nonZeroIndex]] = [nums[nonZeroIndex], nums[i]];
            nonZeroIndex++;
        }
    }
    return nums;
};

=====

2. https://leetcode.com/problems/contains-duplicate/

/**
 * @param {number[]} nums
 * @return {boolean}
 */
var containsDuplicate = function(nums) {
    let dictionary = {};
    for(let i = 0; i < nums.length; i++) {
        if(dictionary[nums[i]]) {
            return true;
        } else {
            dictionary[nums[i]] = 1
        }
    }
    return false;
};

=====

3. https://leetcode.com/problems/contains-duplicate-ii/

/**
 * @param {number[]} nums
 * @param {number} k
 * @return {boolean}
 */
var containsNearbyDuplicate = function (nums, k) {
  let dictionary = {};
  for (let i = 0; i < nums.length; i++) {
    if (
      typeof dictionary[nums[i]] !== "undefined" &&
      Math.abs(i - dictionary[nums[i]]) <= k &&
      Math.abs(i - dictionary[nums[i]]) > 0
    ) {
      return true;
    } else {
      dictionary[nums[i]] = i;
    }
  }
  return false;
};

=====

4. https://leetcode.com/problems/summary-ranges/

/**
 * @param {number[]} nums
 * @return {string[]}
 */
var summaryRanges = function(nums) {
    const result = [];

    for(let i = 0; i < nums.length; i++) {
        let start = nums[i];
        let end = nums[i];

        while( i < nums.length && nums[i] + 1 === nums[i + 1]) {
            end = nums[i+1];
            i++;
        }

        if(start !== end) {
            result.push(`${start}->${end}`);
        } else {
            result.push(`${start}`);
        }
    }
    return result;
};

======

5. https://leetcode.com/problems/range-sum-query-immutable/

/**
 * @param {number[]} nums
 */
var NumArray = function(nums) {
    this.nums = nums;
};

/** 
 * @param {number} left 
 * @param {number} right
 * @return {number}
 */
NumArray.prototype.sumRange = function(left, right) {
    let sum = 0;
    for(let i = left; i <= right; i++) {
        sum += this.nums[i];
    }
    return sum;
};

/** 
 * Your NumArray object will be instantiated and called as such:
 * var obj = new NumArray(nums)
 * var param_1 = obj.sumRange(left,right)
 */

 ======

 6. https://leetcode.com/problems/range-sum-query-2d-immutable/

 /**
 * @param {number[][]} matrix
 */
var NumMatrix = function(matrix) {
    this.matrix = matrix;
};

/** 
 * @param {number} row1 
 * @param {number} col1 
 * @param {number} row2 
 * @param {number} col2
 * @return {number}
 */
NumMatrix.prototype.sumRegion = function(row1, col1, row2, col2) {
    let sum = 0;
    for(let i = row1; i <= row2; i++) {
        for(let j = col1; j <= col2; j++) {
            sum += this.matrix[i][j]
        }
    }
    return sum;
};

/** 
 * Your NumMatrix object will be instantiated and called as such:
 * var obj = new NumMatrix(matrix)
 * var param_1 = obj.sumRegion(row1,col1,row2,col2)
 */

 ======

 7. https://leetcode.com/problems/remove-element

 /**
 * @param {number[]} nums
 * @param {number} val
 * @return {number}
 */
var removeElement = function(nums, val) {
    let count = 0;
    for(let i = nums.length - 1; i >= 0; i--) {
        if(nums[i] == val) {
            [nums[i], nums[nums.length - 1 - count]] = [nums[nums.length - 1 - count], nums[i]];
            count++;
        }
    }
    return nums.length - count;
};

======

8. https://leetcode.com/problems/intersection-of-two-arrays/

/**
 * @param {number[]} nums1
 * @param {number[]} nums2
 * @return {number[]}
 */
var intersection = function(nums1, nums2) {
    let dictionary = {};
    let result = [];
    for(let i = 0; i < nums1.length; i++) {
        dictionary[nums1[i]] = 1;
    }
    for(let i = 0; i < nums2.length; i++) {
        if(dictionary[nums2[i]] === 1){
            dictionary[nums2[i]]++;
        }
    }
    Object.entries(dictionary).forEach(([key, value]) => {
        if(value > 1) {
            result.push(key);
        }
    });
    return result;
};

======

9. https://leetcode.com/problems/intersection-of-two-arrays-ii/

/**
 * @param {number[]} nums1
 * @param {number[]} nums2
 * @return {number[]}
 */
var intersect = function(nums1, nums2) {
    let dictionary = {};
    let result = [];
    for(let i = 0; i < nums1.length; i++) {
        if(dictionary[nums1[i]]){
            dictionary[nums1[i]]++;
        } else {
            dictionary[nums1[i]] = 1;
        }
    }
    for(let i = 0; i < nums2.length; i++) {
        if(dictionary[nums2[i]]) {
            result.push(nums2[i]);
            dictionary[nums2[i]]--;
        }
    }
    return result;
};

======

10. https://leetcode.com/problems/next-greater-element-i/

/**
 * @param {number[]} nums1
 * @param {number[]} nums2
 * @return {number[]}
 */
var nextGreaterElement = function(nums1, nums2) {
    const stack = [];
    const nextGreater = {};

    for(let i = 0; i < nums2.length; i++) {
        while(stack.length > 0 && nums2[i] > stack[stack.length - 1]) {
            nextGreater[stack.pop()] = nums2[i];
        }
        stack.push(nums2[i]);
    }

    const ans = [];
    for(let i = 0; i < nums1.length; i++) {
        if(nextGreater[nums1[i]]) {
            ans.push(nextGreater[nums1[i]])
        } else {
            ans.push(-1);
        }
    }

    return ans;
};

======

11. https://leetcode.com/problems/next-greater-element-ii/

/**
 * @param {number[]} nums
 * @return {number[]}
 */
var nextGreaterElements = function(nums) {
    const n = nums.length;
    const result = new Array(n).fill(-1);
    const stack = [];

    // Traverse the array twice to handle the circular property
    for(let i = 0; i < 2*n; i++) {
        const num = nums[i % n];
        while(stack.length > 0 && nums[stack[stack.length - 1]] < num) {
            const index = stack.pop();
            result[index] = num;
        }

        if(i < n) {
            stack.push(i);
        }
    }

    return result;
};

======

12. https://leetcode.com/problems/next-greater-element-iii/

/**
 * @param {number} n
 * @return {number}
 */
var nextGreaterElement = function(n) {
    // Convert the number to an array of digits
    const digits = Array.from(String(n), Number);

    // Find the first decreasing digit from right to left
    let i = digits.length - 2;
    while(i >= 0 && digits[i] >= digits[i+1]) {
        i--;
    }

    // If no such digit is found, there is no greater number
    if(i === -1) {
        return -1;
    }

    // Find the smallest digit to the right of i that is greater than digits[i]
    let j = digits.length - 1;
    while(digits[j] <= digits[i]) {
        j--;
    }

    // Swap digits[i] and digits[j]
    [digits[i], digits[j]] = [digits[j], digits[i]];

    // Reverse the digits to the right of i
    let left = i + 1;
    let right = digits.length - 1;
    while(left < right) {
        [digits[left], digits[right]] = [digits[right], digits[left]];
        left++;
        right--;
    }

    // Convert the array back to a number
    const result = parseInt(digits.join(''), 10);

    //Check if the result fits in a 32-bit integer
    if(result > 2147483647) {
        return -1;
    }

    return result;
};

======

13. https://leetcode.com/problems/rank-teams-by-votes/

/**
 * @param {string[]} votes
 * @return {string}
 */
var rankTeams = function(votes) {
    if (votes.length === 1) return votes[0];
    const score = new Map(votes[0].split('').map(c => [c, new Array(votes[0].length).fill(0)]))
    for(s of votes) {
        for(let i = 0; i < s.length; i++) {
            score.get(s[i])[i]++;
        }
    }
    return votes[0].split('').sort((a, b) => {
        for(let i = 0; i < votes[0].length; i++) {
            if (score.get(a)[i] > score.get(b)[i]) return -1;
            if (score.get(a)[i] < score.get(b)[i]) return 1;
        }
        return a < b ? -1 : 1;
    }).join('');
};

======

14. https://leetcode.com/problems/reduce-array-size-to-the-half/

/**
 * @param {number[]} arr
 * @return {number}
 */
var minSetSize = function(arr) {
    const numFreq = {};
    let count = 0;
    for (let i = 0; i < arr.length; i++) numFreq[arr[i]] ? numFreq[arr[i]]++ : (numFreq[arr[i]] = 1);

    const sortedIntegerFeq = Object.values(numFreq).sort((a, b) => b - a);

    for (let i = 0; i < sortedIntegerFeq.length; i++) {
        count += sortedIntegerFeq[i];
        if (count >= arr.length / 2) return i + 1;
    }
};