// 1. https://leetcode.com/problems/two-sum/ 

/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
var twoSum = function (nums, target) {
  let index1;
  let index2;
  for (let i = 0; i < nums.length; i++) {
    index1 = i;
    for (let j = i + 1; j < nums.length; j++) {
      index2 = j;
      if (nums[index1] + nums[index2] === target) {
        return [index1, index2];
      }
    }
  }
};

=============================

2. https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/

/**
 * @param {number[]} numbers
 * @param {number} target
 * @return {number[]}
 */
var twoSum = function(numbers, target) {
    let index1 = 0;
    let index2 = numbers.length - 1;
    while(index1 < index2) {
        if(numbers[index1] + numbers[index2] === target) {
            return [index1 + 1, index2 + 1];
        } else if(numbers[index1] + numbers[index2] > target) {
            index2--;
        } else {
            index1++;
        }
    }
};

=============================

 3. https://leetcode.com/problems/merge-sorted-array/ 

/**
 * @param {number[]} nums1
 * @param {number} m
 * @param {number[]} nums2
 * @param {number} n
 * @return {void} Do not return anything, modify nums1 in-place instead.
 */
var merge = function (nums1, m, nums2, n) {
  let i = m - 1;
  let j = n - 1;
  let k = m + n - 1;

  while (i >= 0 && j >= 0) {
    if (nums1[i] > nums2[j]) {
      nums1[k] = nums1[i];
      i--;
    } else {
      nums1[k] = nums2[j];
      j--;
    }
    k--;
  }

  while (j >= 0) {
    nums1[k] = nums2[j];
    j--;
    k--;
  }
};
