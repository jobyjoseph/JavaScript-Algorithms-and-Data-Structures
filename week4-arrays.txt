// 1. https://leetcode.com/problems/two-sum/ 

/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
var twoSum = function (nums, target) {
  let index1;
  let index2;
  for (let i = 0; i < nums.length; i++) {
    index1 = i;
    for (let j = i + 1; j < nums.length; j++) {
      index2 = j;
      if (nums[index1] + nums[index2] === target) {
        return [index1, index2];
      }
    }
  }
};

=============================

2. https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/

/**
 * @param {number[]} numbers
 * @param {number} target
 * @return {number[]}
 */
var twoSum = function(numbers, target) {
    let index1 = 0;
    let index2 = numbers.length - 1;
    while(index1 < index2) {
        if(numbers[index1] + numbers[index2] === target) {
            return [index1 + 1, index2 + 1];
        } else if(numbers[index1] + numbers[index2] > target) {
            index2--;
        } else {
            index1++;
        }
    }
};

=============================

 3. https://leetcode.com/problems/merge-sorted-array/ 

/**
 * @param {number[]} nums1
 * @param {number} m
 * @param {number[]} nums2
 * @param {number} n
 * @return {void} Do not return anything, modify nums1 in-place instead.
 */
var merge = function (nums1, m, nums2, n) {
  let i = m - 1;
  let j = n - 1;
  let k = m + n - 1;

  while (i >= 0 && j >= 0) {
    if (nums1[i] > nums2[j]) {
      nums1[k] = nums1[i];
      i--;
    } else {
      nums1[k] = nums2[j];
      j--;
    }
    k--;
  }

  while (j >= 0) {
    nums1[k] = nums2[j];
    j--;
    k--;
  }
};

====================================

4. https://leetcode.com/problems/pascals-triangle/

/**
 * @param {number} numRows
 * @return {number[][]}
 */
var generate = function(numRows) {
    if(numRows <= 0)
        return [];
    
    let triangle = [[1]];

    for(let i = 1; i < numRows; i++) {
        let row = [1];
        for(let j = 1; j < i; j++) {
            row.push(triangle[i - 1][j - 1] + triangle[i - 1][j])
        }
        row.push(1);
        triangle.push(row);
    }
    return triangle;
};

==========================

5. https://leetcode.com/problems/pascals-triangle-ii/ 

/**
 * @param {number} rowIndex
 * @return {number[]}
 */
var getRow = function(rowIndex) {
    let triangle = [[1]]

    for(let i = 0; i < rowIndex; i++){
        let row = [1];
        for(let j = 0; j < i; j++) {
            row.push(triangle[i][j] + triangle[i][j+1])
        }
        row.push(1);
        triangle.push(row);
    }

    return triangle[rowIndex];
};

==============================

6. https://leetcode.com/problems/best-time-to-buy-and-sell-stock/

/**
 * @param {number[]} prices
 * @return {number}
 */
var maxProfit = function(prices) {
    let minPrice = prices[0];
    let maxProfit = 0;
    for(let i = 1; i < prices.length; i++) {
        minPrice = Math.min(prices[i], minPrice);
        maxProfit = Math.max(maxProfit, prices[i] - minPrice);
    }

    return maxProfit
};

================================

7. https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/

/**
 * @param {number[]} prices
 * @return {number}
 */
var maxProfit = function(prices) {
    let maxProfit = 0;

    for(let i = 1; i < prices.length; i++) {
        if(prices[i] > prices[i - 1]) {
            maxProfit += prices[i] - prices[i-1]
        }
    }

    return maxProfit;
};

==============================

8. https://leetcode.com/problems/majority-element/

/**
 * @param {number[]} nums
 * @return {number}
 */
var majorityElement = function(nums) {
    let dictionary = {};
    let maxObj = {value: 0, count: 0};
    for(let i = 0; i < nums.length; i++){
        dictionary[nums[i]] = dictionary[nums[i]] ? ++dictionary[nums[i]] : 1;
        if(maxObj.count < dictionary[nums[i]]) {
            maxObj.value = nums[i];
            maxObj.count = dictionary[nums[i]];
        }
    }
    return maxObj.value;
};

==============================

9. https://leetcode.com/problems/majority-element-ii/

/**
 * @param {number[]} nums
 * @return {number[]}
 */
var majorityElement = function(nums) {
    let dictionary = {};
    let response = [];
    for(let i = 0; i < nums.length; i++){
        dictionary[nums[i]] = dictionary[nums[i]] ? ++dictionary[nums[i]] : 1;
    }

    Object.entries(dictionary).forEach(([key, value]) => {
        if(value > Math.floor(nums.length / 3)) {
            response.push(key);
        }
    });
    return response;
};

==============================

10. https://leetcode.com/problems/missing-ranges/

skipping as it requires premium account

==============================

11. https://leetcode.com/problems/3sum/

/**
 * @param {number[]} nums
 * @return {number[][]}
 */
var threeSum = function(nums) {
    let result = [];

    // Sort the array
    nums.sort((a, b) => a - b);

    for(let i = 0; i < nums.length - 2; i++) {
        if(i > 0 && nums[i] === nums[i-1]) {
            continue;
        }

        let left = i + 1;
        let right = nums.length - 1;

        while(left < right) {
            let sum = nums[i] + nums[left] + nums[right];

            if(sum === 0){
                result.push([nums[i], nums[left], nums[right]]);

                // Skip duplicate values for left
                while(left < right && nums[left] === nums[left+1]) {
                    left++;
                }

                // Skip duplicate values for right
                while(left < right && nums[right] === nums[right - 1]) {
                    right--;
                }

                left++;
                right--;
            } else if (sum < 0) {
                left++;
            } else {
                right--;
            }
        }
    }

    return result;
};

================================

12. https://leetcode.com/problems/3sum-smaller/ 

Not done. need premium account

================================

13. https://leetcode.com/problems/3sum-closest/

/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */
var threeSumClosest = function(nums, target) {
    nums.sort((a, b) => a - b);
    
    let closestSum = Infinity;

    for(let i = 0; i < nums.length - 2; i++) {
        let left = i + 1;
        let right = nums.length - 1;

        while(left < right) {
            const currentSum = nums[i] + nums[left] + nums[right];

            // Update closestSum if the current sum is closer to the target
            if(Math.abs(currentSum - target) < Math.abs(closestSum - target)) {
                closestSum = currentSum;
            }

            // Adjust pointers based on the comparison with the target
            if(currentSum < target) {
                left++;
            } else {
                right--;
            }
        }
    }

    return closestSum;
};
